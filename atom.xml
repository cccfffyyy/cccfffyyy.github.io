<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>碎片</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.cphoenix.cn/"/>
  <updated>2019-06-25T06:51:23.513Z</updated>
  <id>http://www.cphoenix.cn/</id>
  
  <author>
    <name>cuify</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python学习-Day15</title>
    <link href="http://www.cphoenix.cn/2019/06/25/python-20190625/"/>
    <id>http://www.cphoenix.cn/2019/06/25/python-20190625/</id>
    <published>2019-06-25T01:28:20.000Z</published>
    <updated>2019-06-25T06:51:23.513Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h4><p>Python就内置了SQLite3，所以，在Python中使用SQLite，不需要安装任何东西，直接使用。  </p><p>Python定义了一套操作数据库的API接口，任何数据库要连接到Python，只需要提供符合Python标准的数据库驱动即可。    </p><p>使用Python的DB-API时，只要搞清楚Connection和Cursor对象，打开后一定记得关闭，就可以放心地使用。</p><p>使用Cursor对象执行insert，update，delete语句时，执行结果由rowcount返回影响的行数，就可以拿到执行结果。</p><p>使用Cursor对象执行select语句时，通过fetchall()可以拿到结果集。结果集是一个list，每个元素都是一个tuple，对应一行记录。   </p><p>如果SQL语句带有参数，那么需要把参数按照位置传递给execute()方法，有几个?占位符就必须对应几个参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">'test1.db'</span>) <span class="comment">#如果没有该数据库文件，会在当前目录创建</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">'create table user  (id varchar(20) primary key, name varchar(20))'</span>)</span><br><span class="line">cursor.execute(<span class="string">'insert into user (id, name) values (\'2\', \'Anine\')'</span>)</span><br><span class="line">cursor.close()</span><br><span class="line">conn.commit()  <span class="comment">#提交事务</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">'test1.db'</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">'select * from user'</span>)</span><br><span class="line">values = cursor.fetchall()</span><br><span class="line">print(values)</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><pre><code>[(&#39;2&#39;, &#39;Anine&#39;)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##练习  返回指定分数区间的名字，按分数从低到高排序</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os, sqlite3</span><br><span class="line"></span><br><span class="line">db_file = os.path.join(os.path.dirname(<span class="string">'__file__'</span>), <span class="string">'test.db'</span>)</span><br><span class="line"><span class="keyword">if</span> os.path.isfile(db_file):</span><br><span class="line">    os.remove(db_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始数据:</span></span><br><span class="line">conn = sqlite3.connect(db_file)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">'create table user(id varchar(20) primary key, name varchar(20), score int)'</span>)</span><br><span class="line">cursor.execute(<span class="string">r"insert into user values ('A-001', 'Adam', 95)"</span>)</span><br><span class="line">cursor.execute(<span class="string">r"insert into user values ('A-002', 'Bart', 62)"</span>)</span><br><span class="line">cursor.execute(<span class="string">r"insert into user values ('A-003', 'Lisa', 78)"</span>)</span><br><span class="line">cursor.close()</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_score_in</span><span class="params">(low, high)</span>:</span></span><br><span class="line">    conn = sqlite3.connect(db_file)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">'select name from user where score &gt;= ? and score &lt;= ? order by score'</span>,(low,high))</span><br><span class="line">    values = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> values]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> get_score_in(<span class="number">80</span>, <span class="number">95</span>) == [<span class="string">'Adam'</span>], get_score_in(<span class="number">80</span>, <span class="number">95</span>)</span><br><span class="line"><span class="keyword">assert</span> get_score_in(<span class="number">60</span>, <span class="number">80</span>) == [<span class="string">'Bart'</span>, <span class="string">'Lisa'</span>], get_score_in(<span class="number">60</span>, <span class="number">80</span>)</span><br><span class="line"><span class="keyword">assert</span> get_score_in(<span class="number">60</span>, <span class="number">100</span>) == [<span class="string">'Bart'</span>, <span class="string">'Lisa'</span>, <span class="string">'Adam'</span>], get_score_in(<span class="number">60</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Pass'</span>)</span><br></pre></td></tr></table></figure><pre><code>Pass</code></pre><p>Mysql和SQLite差不多，就是import的包不同，占位符是%s。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;SQLite&quot;&gt;&lt;a href=&quot;#SQLite&quot; class=&quot;headerlink&quot; title=&quot;SQLite&quot;&gt;&lt;/a&gt;SQLite&lt;/h4&gt;&lt;p&gt;Python就内置了SQLite3，所以，在Python中使用SQLite，不需要安装任何东西，直接使用。 
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="访问数据库" scheme="http://www.cphoenix.cn/tags/%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day14</title>
    <link href="http://www.cphoenix.cn/2019/06/20/python-20190620/"/>
    <id>http://www.cphoenix.cn/2019/06/20/python-20190620/</id>
    <published>2019-06-20T01:23:20.000Z</published>
    <updated>2019-06-20T08:48:31.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>Python的标准库提供了两个模块：_thread和threading，_thread是低级模块，threading是高级模块，对_thread进行了封装。绝大多数情况下，我们只需要使用threading这个高级模块。<br>启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time,threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'thread is running...%s...'</span>%threading.current_thread().name) <span class="comment">#返回当前线程的实例 current_thread()</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'thread %s&gt;&gt;&gt;%s'</span>%(threading.current_thread().name,n))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'thread %s ended'</span>%threading.current_thread().name)</span><br><span class="line">        </span><br><span class="line">print(<span class="string">'thread is running...%s...'</span>%threading.current_thread().name)   <span class="comment">#主线程名字的实例MainThread</span></span><br><span class="line">t = threading.Thread(target = loop ,name = <span class="string">'LoopThread'</span>)   <span class="comment">#子线程名字在创建时指定</span></span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line">print(<span class="string">'thread %s ended'</span>%threading.current_thread().name)</span><br></pre></td></tr></table></figure><pre><code>thread is running...MainThread...thread is running...LoopThread...thread LoopThread&gt;&gt;&gt;2thread LoopThread endedthread LoopThread&gt;&gt;&gt;3thread LoopThread endedthread LoopThread&gt;&gt;&gt;4thread LoopThread endedthread LoopThread&gt;&gt;&gt;5thread LoopThread endedthread MainThread ended</code></pre><p><strong>threading.Lock()</strong><br>由于锁只有一个，无论多少线程，同一时刻最多只有一个线程持有该锁，所以，不会造成修改的冲突。创建一个锁就是通过threading.Lock()来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time,threading</span><br><span class="line"></span><br><span class="line">balance = <span class="number">0</span>   <span class="comment">#存款</span></span><br><span class="line">lock = threading.Lock() <span class="comment">#锁   加入锁是为了避免修改冲突</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        lock.acquire()  <span class="comment">#先获取锁</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            change_it(n)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            lock.release()  <span class="comment">#改完了一定要释放锁</span></span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target = run_thread,args = (<span class="number">5</span>,))</span><br><span class="line">t2 = threading.Thread(target = run_thread,args = (<span class="number">8</span>,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">print(balance)</span><br></pre></td></tr></table></figure><pre><code>0</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h3&gt;&lt;p&gt;Python的标准库提供了两个模块：_thread和threading，_thread是低级模块，threading是高级模块，对_
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="多线程" scheme="http://www.cphoenix.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="threading" scheme="http://www.cphoenix.cn/tags/threading/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day13</title>
    <link href="http://www.cphoenix.cn/2019/06/14/python-20190614/"/>
    <id>http://www.cphoenix.cn/2019/06/14/python-20190614/</id>
    <published>2019-06-14T01:21:20.000Z</published>
    <updated>2019-06-14T05:59:47.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>Unix/Linux操作系统提供了一个fork()系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是fork()调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</p><p>子进程永远返回0，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Process %s start...'</span>%os.getpid())  <span class="comment">#获取当前进程</span></span><br><span class="line"></span><br><span class="line">pid = os.fork()   <span class="comment">#子进程永远返回0，而父进程返回子进程的ID</span></span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'I am child process %s , and my parent process is %s'</span>%(os.getpid(),os.getppid()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'I am %s,just created process %s'</span>%(os.getpid(),pid))</span><br></pre></td></tr></table></figure><pre><code>Process 46683 start...I am 46683,just created process 46785I am child process 46785 , and my parent process is 46683</code></pre><h4 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h4><p>multiprocessing模块就是跨平台版本的多进程模块。</p><p><strong>Process</strong><br>提供了一个Process类来代表一个进程对象。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Run child process %s is %s'</span>%(name,os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:    </span><br><span class="line">    print(<span class="string">'Parent process %s'</span>%os.getpid())</span><br><span class="line">    p = Process(target = run,args = (<span class="string">'进程'</span>,))</span><br><span class="line">    print(<span class="string">'Child process will start...'</span>)</span><br><span class="line">    p.start()   <span class="comment">#启动</span></span><br><span class="line">    p.join()   <span class="comment">#等待子进程结束后继续向下运行，通常用于进程间的同步</span></span><br><span class="line">    print(<span class="string">'Child process end...'</span>)</span><br></pre></td></tr></table></figure><pre><code>Parent process 46683Child process will start...Run child process 进程 is 46837Child process end...</code></pre><p><strong>进程池(Pool)</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_time_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Run task %s is %s'</span>%(name,os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random()*<span class="number">3</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'Task %s runs %0.2f s.'</span>%(name,(end-start)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process is %s'</span>%os.getpid())</span><br><span class="line">    p = Pool(<span class="number">4</span>)   <span class="comment">#最多同时跑4个进程，默认是CPU核数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        p.apply_async(long_time_task,args = (i,))</span><br><span class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()  <span class="comment">#join()方法会等待所有子进程执行完毕，调用join()之前必须先调用close()，调用close()之后就不能继续添加新的Process了</span></span><br><span class="line">    print(<span class="string">'All subprocesses done.'</span>)</span><br></pre></td></tr></table></figure><pre><code>Parent process is 46683Run task 0 is 46895Run task 1 is 46896Run task 2 is 46897Run task 3 is 46898Task 2 runs 0.14 s.Run task 4 is 46897Waiting for all subprocesses done...Task 3 runs 0.29 s.Task 0 runs 2.76 s.Task 1 runs 2.90 s.Task 4 runs 2.95 s.All subprocesses done.</code></pre><p><strong>子进程</strong><br>subprocess模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进程间通信</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'写进程：'</span>,os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>]:</span><br><span class="line">        print(<span class="string">'将%s插入queue'</span>%value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'读进程：'</span>,os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        value = q.get(<span class="keyword">True</span>)</span><br><span class="line">        print(<span class="string">'得到值%s'</span>%value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target = write,args =(q,) )</span><br><span class="line">    pr = Process(target = read,args = (q,))</span><br><span class="line">    pw.start()</span><br><span class="line">    pr.start()</span><br><span class="line">    pw.join()</span><br><span class="line">    pr.terminate()   <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br></pre></td></tr></table></figure><pre><code>写进程： 47442读进程： 47443将A插入queue得到值A将B插入queue得到值B将C插入queue得到值C</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;多进程&quot;&gt;&lt;a href=&quot;#多进程&quot; class=&quot;headerlink&quot; title=&quot;多进程&quot;&gt;&lt;/a&gt;多进程&lt;/h3&gt;&lt;p&gt;Unix/Linux操作系统提供了一个fork()系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是fork()调用一次
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="多进程" scheme="http://www.cphoenix.cn/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="multiprocessing" scheme="http://www.cphoenix.cn/tags/multiprocessing/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day12</title>
    <link href="http://www.cphoenix.cn/2019/06/12/python-20190612/"/>
    <id>http://www.cphoenix.cn/2019/06/12/python-20190612/</id>
    <published>2019-06-12T01:35:02.000Z</published>
    <updated>2019-06-12T07:17:06.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IO编程"><a href="#IO编程" class="headerlink" title="IO编程"></a>IO编程</h3><h4 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h4><p>磁盘上读写文件的功能都是操作系统提供的，读写文件就是请求操作系统打开一个文件对象<br>（文件描述符），然后通过操作系统提供的接口从这个文件对象中读取数据，或者把数据写入这个文件对象。  </p><p><strong>读文件</strong><br>要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符。<br>文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读文件</span></span><br><span class="line"><span class="keyword">try</span>:       <span class="comment">#无论是否出错，都关闭文件</span></span><br><span class="line">    f = open(<span class="string">'./err.py'</span>,<span class="string">'r'</span>)   <span class="comment">#打开一个文件，r 代表读</span></span><br><span class="line">    print(f.read())     <span class="comment">#一次读取全部内容，读到内存，用str表示</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()   <span class="comment">#关闭文件</span></span><br></pre></td></tr></table></figure><pre><code>#err.pyimport pdbs = &#39;0&#39;n = int(s)pdb.set_trace() #运行到这里会自动暂停print(10 / n)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更加简洁的写法，和try...finally一样</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./err.py'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:   <span class="comment">#with语句可以自动调用close方法</span></span><br><span class="line">    print(f.read(<span class="number">4</span>))   <span class="comment">#read(size)  最多读取size个字节的内容</span></span><br><span class="line">    print(f.readline()) <span class="comment">#每次读取一行内容</span></span><br><span class="line">    print(f.readlines())  <span class="comment">#一次读取所有内容并按行返回list，读取配置文件比较合适</span></span><br></pre></td></tr></table></figure><pre><code>#err.py[&#39;import pdb\n&#39;, &#39;\n&#39;, &quot;s = &#39;0&#39;\n&quot;, &#39;n = int(s)\n&#39;, &#39;pdb.set_trace() #运行到这里会自动暂停\n&#39;, &#39;print(10 / n)\n&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'./gbk.txt'</span>,<span class="string">'rb'</span>)  <span class="comment">#rb 二进制</span></span><br><span class="line">    print(f.read())</span><br><span class="line">    f2 = open(<span class="string">'./gbk.txt'</span>,<span class="string">'r'</span>,encoding = <span class="string">'utf-8'</span>, errors = <span class="string">'ignore'</span>) <span class="comment">#encoding 编码；errors 忽略编码错误</span></span><br><span class="line">    print(f2.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br><span class="line">    f2.close()</span><br></pre></td></tr></table></figure><pre><code>b&#39;\xe6\xb5\x8b\xe8\xaf\x95\n&#39;测试</code></pre><p><strong>写文件</strong><br>写文件和读文件是一样的，唯一区别是调用open()函数时，传入标识符’w’或者’wb’表示写文本文件或写二进制文件。<br>以’w’模式写入文件时，如果文件已存在，会直接覆盖（相当于删掉后新写入一个文件）。如果我们希望追加到文件末尾怎么办？可以传入’a’以追加（append）模式写入。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#写文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./gbk.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:  <span class="comment">#w完全覆盖</span></span><br><span class="line">    f.write(<span class="string">'写一行文本进去～'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./gbk.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./gbk.txt'</span>,<span class="string">'a'</span>) <span class="keyword">as</span> f:  <span class="comment">#追加 append</span></span><br><span class="line">    f.write(<span class="string">'追加文本～'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./gbk.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><pre><code>写一行文本进去～写一行文本进去～追加文本～</code></pre><p><strong>StringIO</strong><br>StringIO顾名思义就是在内存中读写str。要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#StringIO   </span></span><br><span class="line"><span class="comment">##BytesIO 和StringIO一样，只是操作的是二进制数据，不是str，在这里就不写了</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">f = StringIO()</span><br><span class="line">f.write(<span class="string">'hey '</span>)</span><br><span class="line">f.write(<span class="string">'buddy~'</span>)</span><br><span class="line">print(f.getvalue())   <span class="comment">#getvalue获取写入后的str</span></span><br><span class="line"></span><br><span class="line">t = StringIO(<span class="string">'今天\n天气\n真不错'</span>)   <span class="comment">#初始化一个str</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    s = t.readline()</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(s.strip())  <span class="comment">#strip用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列</span></span><br></pre></td></tr></table></figure><pre><code>hey buddy~今天天气真不错</code></pre><p><strong>BytesIO</strong><br>和StringIO一样，只是操作的是二进制数据   </p><h4 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h4><p>Python的os模块封装了操作系统的目录和文件操作，要注意这些函数有的在os模块中，有的在os.path模块中。</p><blockquote><p>查看当前目录的绝对路径:<br>>&gt;&gt; os.path.abspath(‘.’)<br>‘/Users/michael’<br>在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:<br>>&gt;&gt; os.path.join(‘/Users/michael’, ‘testdir’)<br>‘/Users/michael/testdir’<br>然后创建一个目录:<br>>&gt;&gt; os.mkdir(‘/Users/michael/testdir’)<br>删掉一个目录:<br>>&gt;&gt; os.rmdir(‘/Users/michael/testdir’)<br>拆分路径<br>>&gt;&gt;os.path.split(‘/Users/michael/testdir/file.txt’)<br>(‘/Users/michael/testdir’, ‘file.txt’)<br>得到文件扩展名<br>>&gt;&gt; os.path.splitext(‘/path/to/file.txt’)<br>(‘/path/to/file’, ‘.txt’)<br>对文件重命名:<br>>&gt;&gt; os.rename(‘test.txt’, ‘test.py’)<br>删掉文件:<br>>&gt;&gt; os.remove(‘test.py’)  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编写一个程序，能在当前目录以及当前目录的所有子目录下查找文件名包含指定字符串的文件，并打印出相对路径。</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printFileName</span><span class="params">(path, key_word)</span>:</span>   <span class="comment">#传入路径 和 关键字</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(os.path.join(path, x)): </span><br><span class="line">            printFileName(os.path.join(path, x), key_word)</span><br><span class="line">        <span class="keyword">elif</span> key_word <span class="keyword">in</span> os.path.splitext(x)[<span class="number">0</span>]:</span><br><span class="line">              print(os.path.join(path, x))</span><br><span class="line">printFileName(<span class="string">'.'</span>,<span class="string">'0604'</span>)</span><br></pre></td></tr></table></figure><pre><code>./190604.ipynb./.ipynb_checkpoints/190604-checkpoint.ipynb</code></pre><h4 id="序列化-pickling-反序列化-unpickling"><a href="#序列化-pickling-反序列化-unpickling" class="headerlink" title="序列化(pickling) 反序列化(unpickling)"></a>序列化(pickling) 反序列化(unpickling)</h4><p>Python语言特定的序列化模块是pickle，但如果要把序列化搞得更通用、更符合Web标准，就可以使用json模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#序列化两种方式</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">d = dict(name = <span class="string">'Bob'</span>,age = <span class="number">20</span>, score = <span class="number">80</span>)</span><br><span class="line">f = open(<span class="string">'./dump.txt'</span>,<span class="string">'wb'</span>)</span><br><span class="line">pickle.dump(d,f)     <span class="comment">#序列化</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./dump.txt'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    d = pickle.load(f)   <span class="comment">#反序列化</span></span><br><span class="line">    print(d)</span><br></pre></td></tr></table></figure><pre><code>{&#39;name&#39;: &#39;Bob&#39;, &#39;age&#39;: 20, &#39;score&#39;: 80}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">d = dict(eat = <span class="string">'草莓'</span>,drink = <span class="string">'奶茶'</span>)</span><br><span class="line">b = pickle.dumps(d)  <span class="comment">#把任意对象序列化成一个bytes</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./dump.txt'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(b)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./dump.txt'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    d = f.read()</span><br><span class="line">    d = pickle.loads(d)    <span class="comment">#反序列化</span></span><br><span class="line">    print(d)</span><br></pre></td></tr></table></figure><pre><code>{&#39;eat&#39;: &#39;草莓&#39;, &#39;drink&#39;: &#39;奶茶&#39;}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python 内置 json</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">d = dict(name=<span class="string">'Bob'</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)</span><br><span class="line">print(json.dumps(d))   <span class="comment">#python 转化为 json</span></span><br><span class="line">json_str = <span class="string">'&#123;"age": 20, "score": 88, "name": "Bob"&#125;'</span></span><br><span class="line">print(json.loads(json_str))  <span class="comment">#json 反序列化为 python对象</span></span><br></pre></td></tr></table></figure><pre><code>{&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 20, &quot;score&quot;: 88}{&#39;age&#39;: 20, &#39;score&#39;: 88, &#39;name&#39;: &#39;Bob&#39;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;IO编程&quot;&gt;&lt;a href=&quot;#IO编程&quot; class=&quot;headerlink&quot; title=&quot;IO编程&quot;&gt;&lt;/a&gt;IO编程&lt;/h3&gt;&lt;h4 id=&quot;文件读写&quot;&gt;&lt;a href=&quot;#文件读写&quot; class=&quot;headerlink&quot; title=&quot;文件读写&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="IO编程" scheme="http://www.cphoenix.cn/tags/IO%E7%BC%96%E7%A8%8B/"/>
    
      <category term="文件读写" scheme="http://www.cphoenix.cn/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
    
      <category term="StringIO和BytesIO" scheme="http://www.cphoenix.cn/tags/StringIO%E5%92%8CBytesIO/"/>
    
      <category term="json" scheme="http://www.cphoenix.cn/tags/json/"/>
    
      <category term="序列化" scheme="http://www.cphoenix.cn/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="操作文件和目录" scheme="http://www.cphoenix.cn/tags/%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day11</title>
    <link href="http://www.cphoenix.cn/2019/06/11/python-20190611/"/>
    <id>http://www.cphoenix.cn/2019/06/11/python-20190611/</id>
    <published>2019-06-11T02:05:02.000Z</published>
    <updated>2019-06-12T07:04:16.864Z</updated>
    
    <content type="html"><![CDATA[<h4 id="type-函数"><a href="#type-函数" class="headerlink" title="type()函数"></a>type()函数</h4><p>可以查看一个类型或变量的类型。<br>动态创建class的方法就是使用type()函数。    </p><p>要创建一个class对象，type()函数依次传入3个参数:</p><ol><li>class的名称；  </li><li>继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；  </li><li>class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上。  </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用type()动态创建class</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(self,name = <span class="string">'world'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'Hello:%s'</span>%name)</span><br><span class="line"></span><br><span class="line">Hello = type(<span class="string">'Hello'</span>,(object,),dict(hello=fn))  <span class="comment">#创建Hello class，依次传入 类名、继承的父类(tuple),方法名与函数绑定</span></span><br><span class="line">h = Hello()</span><br><span class="line">h.hello()</span><br><span class="line">print(type(Hello))</span><br><span class="line">print(type(h))</span><br></pre></td></tr></table></figure><pre><code>Hello:world&lt;class &#39;type&#39;&gt;&lt;class &#39;__main__.Hello&#39;&gt;</code></pre><font color="‘b16a59’">tuple单元素写法：因为用()定义单元素的tuple有歧义，所以 Python 规定，单元素 tuple 要多加一个逗号“,”，这样就避免了歧义</font><h3 id="错误、调试和测试"><a href="#错误、调试和测试" class="headerlink" title="错误、调试和测试"></a>错误、调试和测试</h3><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>当我们认为某些代码可能会出错时，就可以用try来运行这段代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即except语句块，执行完except后，如果有finally语句块，则执行finally语句块，至此，执行完毕。<br>所有的错误类型都继承自BaseException。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'try...'</span>)</span><br><span class="line">    r = <span class="number">10</span> / int(<span class="string">'a'</span>)</span><br><span class="line">    print(<span class="string">'result:'</span>,r)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'except:'</span>,e)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> v:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'except'</span>,v)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'no error'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'finally...'</span>)</span><br><span class="line">print(<span class="string">'end'</span>)</span><br></pre></td></tr></table></figure><pre><code>try...except invalid literal for int() with base 10: &#39;a&#39;finally...end</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / int(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bar(<span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:   <span class="comment">#main函数捕捉到foo的异常</span></span><br><span class="line">        print(<span class="string">'Error:'</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'finally...'</span>)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><pre><code>Error: division by zerofinally...</code></pre><h4 id="记录错误"><a href="#记录错误" class="headerlink" title="记录错误"></a>记录错误</h4><p>Python内置的logging模块可以非常容易地记录错误信息。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / int(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bar(<span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line">main()</span><br><span class="line">print(<span class="string">'END'</span>)   <span class="comment">#打印错误后继续执行程序</span></span><br></pre></td></tr></table></figure><pre><code>ERROR:root:division by zeroTraceback (most recent call last):  File &quot;&lt;ipython-input-23-548d57022a52&gt;&quot;, line 11, in main    bar(&#39;0&#39;)  File &quot;&lt;ipython-input-23-548d57022a52&gt;&quot;, line 7, in bar    return foo(s) * 2  File &quot;&lt;ipython-input-23-548d57022a52&gt;&quot;, line 4, in foo    return 10 / int(s)ZeroDivisionError: division by zeroEND</code></pre><h4 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h4><p>如果要抛出错误，首先根据需要，可以定义一个错误的class，选择好继承关系，然后，用raise语句抛出一个错误的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooError</span><span class="params">(ValueError)</span>:</span>   <span class="comment">#定义一个错误的class类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></span><br><span class="line">    n = int(s)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> FooError(<span class="string">'invalid number: %s'</span>%s)  <span class="comment">#抛出一个错误实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</span><br><span class="line"></span><br><span class="line">foo(<span class="string">'0'</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------FooError                                  Traceback (most recent call last)&lt;ipython-input-26-333227bdf036&gt; in &lt;module&gt;      8     return 10 / n      9 ---&gt; 10 foo(&#39;0&#39;)&lt;ipython-input-26-333227bdf036&gt; in foo(s)      5     n = int(s)      6     if n == 0:----&gt; 7         raise FooError(&#39;invalid number: %s&#39;%s)  #抛出一个错误实例      8     return 10 / n      9 FooError: invalid number: 0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></span><br><span class="line">    n = int(s)</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'invalid value: %s'</span> % s)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        foo(<span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'ValueError!'</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">bar()</span><br></pre></td></tr></table></figure><pre><code>ValueError!---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-27-afddea58d827&gt; in &lt;module&gt;     12         raise     13 ---&gt; 14 bar()&lt;ipython-input-27-afddea58d827&gt; in bar()      7 def bar():      8     try:----&gt; 9         foo(&#39;0&#39;)     10     except ValueError as e:     11         print(&#39;ValueError!&#39;)&lt;ipython-input-27-afddea58d827&gt; in foo(s)      2     n = int(s)      3     if n==0:----&gt; 4         raise ValueError(&#39;invalid value: %s&#39; % s)      5     return 10 / n      6 ValueError: invalid value: 0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2num</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span>(int(s))</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> float(s)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(exp)</span>:</span></span><br><span class="line">    ss = exp.split(<span class="string">'+'</span>)</span><br><span class="line">    ns = map(str2num, ss)</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> acc, x: acc + x, ns)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">        r = calc(<span class="string">'100 + 200 + 345'</span>)</span><br><span class="line">        print(<span class="string">'100 + 200 + 345 ='</span>, r)</span><br><span class="line">        r = calc(<span class="string">'99 + 88 + 7.6'</span>)</span><br><span class="line">        print(<span class="string">'99 + 88 + 7.6 ='</span>, r)</span><br><span class="line">        </span><br><span class="line">main()</span><br></pre></td></tr></table></figure><pre><code>100 + 200 + 345 = 64599 + 88 + 7.6 = 194.6</code></pre><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>五种方式：  </p><ol><li>print()  打印出来   </li><li>断言(assert) 启动Python解释器时可以用-O参数来关闭assert   </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#断言</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></span><br><span class="line">    n = int(s)</span><br><span class="line">    <span class="keyword">assert</span> n != <span class="number">0</span>, <span class="string">'0 is zero!'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</span><br><span class="line"></span><br><span class="line">foo(<span class="string">'0'</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------AssertionError                            Traceback (most recent call last)&lt;ipython-input-39-ac4ec61a0154&gt; in &lt;module&gt;      5     return 10 / n      6 ----&gt; 7 foo(&#39;0&#39;)&lt;ipython-input-39-ac4ec61a0154&gt; in foo(s)      2 def foo(s):      3     n = int(s)----&gt; 4     assert n != 0, &#39;0 is zero!&#39;      5     return 10 / n      6 AssertionError: 0 is zero!</code></pre><ol><li>logging  不会抛出错误，而且可以输出到文件。这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，logging.debug就不起作用了。同理，指定level=WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。<br>logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。  </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line">s = <span class="string">'0'</span></span><br><span class="line">n = int(s)</span><br><span class="line">logging.info(<span class="string">'n = %d'</span> % n)</span><br><span class="line">print(<span class="number">10</span> / n)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ZeroDivisionError                         Traceback (most recent call last)&lt;ipython-input-45-c42985358872&gt; in &lt;module&gt;      4 n = int(s)      5 logging.info(&#39;n = %d&#39; % n)----&gt; 6 print(10 / n)ZeroDivisionError: division by zero</code></pre><ol><li>pdb  <blockquote><p>python -m pdb err.py   </p></blockquote></li></ol><p>输入命令l来查看代码<br>输入命令n可以单步执行代码<br>任何时候都可以输入命令<strong>p 变量名</strong>来查看变量<br>输入命令q结束调试，退出程序</p><p>只需要import pdb，然后，在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点   </p><ol><li>IDE<br>PyCharm/VSCODE</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单元测试 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dict</span><span class="params">(dict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kw)</span>:</span></span><br><span class="line">        super().__init__(**kw)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r"'Dict' object has no attribute '%s'"</span> % key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line">d = Dict(a = <span class="number">1</span>,b = <span class="number">2</span>)</span><br><span class="line">d[<span class="string">'a'</span>]</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单元测试</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>  self.score &gt; <span class="number">100</span> <span class="keyword">or</span> self.score &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">elif</span> self.score &gt;= <span class="number">80</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.score &gt;= <span class="number">60</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'C'</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_80_to_100</span><span class="params">(self)</span>:</span></span><br><span class="line">        s1 = Student(<span class="string">'Bart'</span>, <span class="number">80</span>)</span><br><span class="line">        s2 = Student(<span class="string">'Lisa'</span>, <span class="number">100</span>)</span><br><span class="line">        self.assertEqual(s1.get_grade(), <span class="string">'A'</span>)</span><br><span class="line">        self.assertEqual(s2.get_grade(), <span class="string">'A'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_60_to_80</span><span class="params">(self)</span>:</span></span><br><span class="line">        s1 = Student(<span class="string">'Bart'</span>, <span class="number">60</span>)</span><br><span class="line">        s2 = Student(<span class="string">'Lisa'</span>, <span class="number">79</span>)</span><br><span class="line">        self.assertEqual(s1.get_grade(), <span class="string">'B'</span>)</span><br><span class="line">        self.assertEqual(s2.get_grade(), <span class="string">'B'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_0_to_60</span><span class="params">(self)</span>:</span></span><br><span class="line">        s1 = Student(<span class="string">'Bart'</span>, <span class="number">0</span>)</span><br><span class="line">        s2 = Student(<span class="string">'Lisa'</span>, <span class="number">59</span>)</span><br><span class="line">        self.assertEqual(s1.get_grade(), <span class="string">'C'</span>)</span><br><span class="line">        self.assertEqual(s2.get_grade(), <span class="string">'C'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_invalid</span><span class="params">(self)</span>:</span></span><br><span class="line">        s1 = Student(<span class="string">'Bart'</span>, <span class="number">-1</span>)</span><br><span class="line">        s2 = Student(<span class="string">'Lisa'</span>, <span class="number">101</span>)</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(ValueError):</span><br><span class="line">            s1.get_grade()</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(ValueError):</span><br><span class="line">            s2.get_grade()</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main(argv=[<span class="string">'first-arg-is-ignored'</span>],exit=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><pre><code>.........----------------------------------------------------------------------Ran 9 tests in 0.021sOK</code></pre><p>ps:文档测试没看懂，以后有需要的时候再回顾</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;type-函数&quot;&gt;&lt;a href=&quot;#type-函数&quot; class=&quot;headerlink&quot; title=&quot;type()函数&quot;&gt;&lt;/a&gt;type()函数&lt;/h4&gt;&lt;p&gt;可以查看一个类型或变量的类型。&lt;br&gt;动态创建class的方法就是使用type()函数。    
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="调试" scheme="http://www.cphoenix.cn/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="异常" scheme="http://www.cphoenix.cn/tags/%E5%BC%82%E5%B8%B8/"/>
    
      <category term="动态创建class" scheme="http://www.cphoenix.cn/tags/%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BAclass/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day10</title>
    <link href="http://www.cphoenix.cn/2019/06/10/python-20190610/"/>
    <id>http://www.cphoenix.cn/2019/06/10/python-20190610/</id>
    <published>2019-06-10T05:38:42.000Z</published>
    <updated>2019-06-12T07:04:13.328Z</updated>
    
    <content type="html"><![CDATA[<h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p>通过多重继承，一个子类可以同时获得多个父类的所有功能。<br>这种设计通常称之为MixIn。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mam</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'mammal'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runnable</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'It can run'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyable</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'It can fly'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Mammal,Runnable)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parrot</span><span class="params">(Bird,Flyable)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">dog=Dog()</span><br><span class="line">parrot = Parrot()</span><br><span class="line">print(dog.run())</span><br><span class="line">print(dog.mam())</span><br></pre></td></tr></table></figure><pre><code>It can runNonemammalNone</code></pre><h4 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h4><p>__str__()   定义该方法，就能返回一个好看的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#__str__</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Student object name %s'</span> % self.name</span><br><span class="line">print(Student(<span class="string">'Micheal'</span>))</span><br></pre></td></tr></table></figure><pre><code>Student object name Micheal</code></pre><p>__iter__   定义该方法，类可以用作for…in循环，返回一个迭代对象。Python的for循环就会不断调用该迭代对象的<strong>next</strong>()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。<br>要表现得像list那样按照下标取出元素，需要实现<strong>getitem</strong>()方法。<br>写一个<strong>getattr</strong>()方法，动态返回一个属性。<br>__call__()方法，可以直接对实例进行调。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#__iter__</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a,self.b = <span class="number">0</span>,<span class="number">1</span>  <span class="comment">#初始化两个计数器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a , self.b=self.b , self.a + self.b</span><br><span class="line">        <span class="keyword">if</span> self.a&gt;<span class="number">1000</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,n)</span>:</span>  <span class="comment">#像list一样按下标取数</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(n,int):</span><br><span class="line">            a , b = <span class="number">1</span> , <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</span><br><span class="line">                a , b = b , a + b</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">if</span> isinstance(n,slice):  <span class="comment">#判断切片</span></span><br><span class="line">            start = n.start</span><br><span class="line">            stop = n.stop</span><br><span class="line">            <span class="keyword">if</span> start <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                start = <span class="number">0</span> </span><br><span class="line">            a , b = <span class="number">1</span> , <span class="number">1</span></span><br><span class="line">            L = []</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(stop):</span><br><span class="line">                <span class="keyword">if</span> x &gt;=start:</span><br><span class="line">                    L.append(a)</span><br><span class="line">                a , b = b , a + b</span><br><span class="line">            <span class="keyword">return</span> L</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> Fib():</span><br><span class="line">    print(n)</span><br><span class="line">f = Fib()</span><br><span class="line">f[<span class="number">0</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>1123581321345589144233377610987[1, 1, 2, 3, 5]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self,attr)</span>:</span>  <span class="comment">#调用不存在的属性，会通过__getattr__尝试获得属性</span></span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">'score'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span></span><br><span class="line">s = Student(<span class="string">'Lucy'</span>)</span><br><span class="line">s.score</span><br></pre></td></tr></table></figure><pre><code>99</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#链式调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chain</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,path = <span class="string">''</span>)</span>:</span></span><br><span class="line">        self._path = path</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self,path)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Chain(<span class="string">'%s/%s'</span>%(self._path,path))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._path</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'直接调用实例'</span></span><br><span class="line">    __repr__ = __str__   <span class="comment">#调试</span></span><br><span class="line">print(Chain().status.user.timeline.list)</span><br><span class="line">c = Chain()</span><br><span class="line">c()</span><br></pre></td></tr></table></figure><pre><code>/status/user/timeline/list&#39;直接调用实例&#39;</code></pre><h4 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#枚举</span></span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum,unique</span><br><span class="line">Month = Enum(<span class="string">'Month'</span>,(<span class="string">'Jan'</span>,<span class="string">'Feb'</span>, <span class="string">'Mar'</span>, <span class="string">'Apr'</span>, <span class="string">'May'</span>, <span class="string">'Jun'</span>, <span class="string">'Jul'</span>, <span class="string">'Aug'</span>, <span class="string">'Sep'</span>, <span class="string">'Oct'</span>, <span class="string">'Nov'</span>, <span class="string">'Dec'</span>))</span><br><span class="line"><span class="keyword">for</span> name,member <span class="keyword">in</span> Month.__members__.items():</span><br><span class="line">    print(name,<span class="string">'=&gt;'</span>,member,<span class="string">','</span>,member.value)   <span class="comment">#value属性则是自动赋给成员的int常量，默认从1开始计数。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@unique   #unique可以帮忙看有没有重复值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Week</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    Sun = <span class="number">0</span> <span class="comment"># Sun的value被设定为0</span></span><br><span class="line">    Mon = <span class="number">1</span></span><br><span class="line">    Tue = <span class="number">2</span></span><br><span class="line">    Wed = <span class="number">3</span></span><br><span class="line">    Thu = <span class="number">4</span></span><br><span class="line">    Fri = <span class="number">5</span></span><br><span class="line">    Sat = <span class="number">6</span></span><br><span class="line">print(<span class="string">'-------------'</span>)</span><br><span class="line"><span class="keyword">for</span> name,member <span class="keyword">in</span> Week.__members__.items():</span><br><span class="line">    print(name,<span class="string">','</span>,member,<span class="string">','</span>,member.value)</span><br></pre></td></tr></table></figure><pre><code>Jan =&gt; Month.Jan , 1Feb =&gt; Month.Feb , 2Mar =&gt; Month.Mar , 3Apr =&gt; Month.Apr , 4May =&gt; Month.May , 5Jun =&gt; Month.Jun , 6Jul =&gt; Month.Jul , 7Aug =&gt; Month.Aug , 8Sep =&gt; Month.Sep , 9Oct =&gt; Month.Oct , 10Nov =&gt; Month.Nov , 11Dec =&gt; Month.Dec , 12-------------Sun , Week.Sun , 0Mon , Week.Mon , 1Tue , Week.Tue , 2Wed , Week.Wed , 3Thu , Week.Thu , 4Fri , Week.Fri , 5Sat , Week.Sat , 6</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;多重继承&quot;&gt;&lt;a href=&quot;#多重继承&quot; class=&quot;headerlink&quot; title=&quot;多重继承&quot;&gt;&lt;/a&gt;多重继承&lt;/h4&gt;&lt;p&gt;通过多重继承，一个子类可以同时获得多个父类的所有功能。&lt;br&gt;这种设计通常称之为MixIn。  &lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="多重继承" scheme="http://www.cphoenix.cn/tags/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF/"/>
    
      <category term="定制类" scheme="http://www.cphoenix.cn/tags/%E5%AE%9A%E5%88%B6%E7%B1%BB/"/>
    
      <category term="枚举类" scheme="http://www.cphoenix.cn/tags/%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day9</title>
    <link href="http://www.cphoenix.cn/2019/06/06/python-20190606/"/>
    <id>http://www.cphoenix.cn/2019/06/06/python-20190606/</id>
    <published>2019-06-06T02:39:39.000Z</published>
    <updated>2019-06-12T07:04:08.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面向对象高级编程"><a href="#面向对象高级编程" class="headerlink" title="面向对象高级编程"></a>面向对象高级编程</h3><h4 id="使用-slots"><a href="#使用-slots" class="headerlink" title="使用__slots__"></a>使用__slots__</h4><p>定义class的时候定义一个特殊的__slots__变量，来限制该class实例能添加的属性<br>__slots__定义的属性只对当前类实例起作用，对继承的子类是不起作用的。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给实例绑定一个方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self,age)</span>:</span></span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line">s = Student(<span class="string">'Bob'</span>)</span><br><span class="line">s.set_age = MethodType(set_age,s)  <span class="comment">#将set_age方法赋给s</span></span><br><span class="line">s.set_age(<span class="number">10</span>)</span><br><span class="line">print(s.age)</span><br><span class="line">Student.set_age = set_age     <span class="comment">#将方法赋给类，那么类的所有对象都可以调用该方法</span></span><br><span class="line">s2 = Student(<span class="string">'Mary'</span>)</span><br><span class="line">s2.set_age(<span class="number">20</span>)</span><br><span class="line">print(s2.age)</span><br></pre></td></tr></table></figure><pre><code>1020</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>,<span class="string">'age'</span>)</span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">s.age = <span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> (s.age)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GStudent</span><span class="params">(Student)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">s1 = GStudent()</span><br><span class="line">s1.birth = <span class="number">1995</span>  <span class="comment">#继承的子类没有限制属性，可以绑定birth属性</span></span><br><span class="line">print(s1.birth)</span><br><span class="line">s.birth = <span class="number">1995</span>  <span class="comment">#限制的属性里没有birth，报错</span></span><br></pre></td></tr></table></figure><pre><code>101995---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-9-05443cb4292b&gt; in &lt;module&gt;     10 s1.birth = 1995     11 print(s1.birth)---&gt; 12 s.birth = 1995  #限制的属性里没有birth，报错AttributeError: &#39;Student&#39; object has no attribute &#39;birth&#39;</code></pre><h4 id="使用-property"><a href="#使用-property" class="headerlink" title="使用@property"></a>使用@property</h4><p>既能检查参数，又可以用类似属性这样简单的方式来访问类的变量。把一个方法变成属性调用。<br>@property，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过getter和setter方法来实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__score</span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value,int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer'</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must between 0~100'</span>)</span><br><span class="line">        self.__score = value</span><br><span class="line">        </span><br><span class="line">s = Student()</span><br><span class="line">s.score = <span class="number">70</span></span><br><span class="line">print(s.score)</span><br></pre></td></tr></table></figure><pre><code>70</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请利用@property给一个Scr.8een对象加上width和height属性，以及一个只读属性resolution</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__width</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__height</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resolution</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__width * self.__height</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @width.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value,int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'width must be number'</span>)</span><br><span class="line">        self.__width = value</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @height.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value,int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'height must be number'</span>)</span><br><span class="line">        self.__height = value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">s = Screen()</span><br><span class="line">s.width = <span class="number">1024</span></span><br><span class="line">s.height = <span class="number">768</span></span><br><span class="line">print(<span class="string">'resolution ='</span>, s.resolution)</span><br><span class="line"><span class="keyword">if</span> s.resolution == <span class="number">786432</span>:</span><br><span class="line">    print(<span class="string">'测试通过!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure><pre><code>resolution = 786432测试通过!</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;面向对象高级编程&quot;&gt;&lt;a href=&quot;#面向对象高级编程&quot; class=&quot;headerlink&quot; title=&quot;面向对象高级编程&quot;&gt;&lt;/a&gt;面向对象高级编程&lt;/h3&gt;&lt;h4 id=&quot;使用-slots&quot;&gt;&lt;a href=&quot;#使用-slots&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="__slots__" scheme="http://www.cphoenix.cn/tags/slots/"/>
    
      <category term="\@property" scheme="http://www.cphoenix.cn/tags/property/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day8</title>
    <link href="http://www.cphoenix.cn/2019/06/05/python-20190605/"/>
    <id>http://www.cphoenix.cn/2019/06/05/python-20190605/</id>
    <published>2019-06-05T05:54:39.000Z</published>
    <updated>2019-06-12T07:04:04.675Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p><strong>回顾</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请把下面的Student对象的gender字段对外隐藏起来，用get_gender()和set_gender()代替</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_gender</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_gender</span><span class="params">(self,gender)</span>:</span></span><br><span class="line">        self.__gender = gender</span><br><span class="line">        </span><br><span class="line">bart = Student(<span class="string">'Bart'</span>, <span class="string">'male'</span>)</span><br><span class="line"><span class="keyword">if</span> bart.get_gender() != <span class="string">'male'</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    bart.set_gender(<span class="string">'female'</span>)</span><br><span class="line">    <span class="keyword">if</span> bart.get_gender() != <span class="string">'female'</span>:</span><br><span class="line">        print(<span class="string">'测试失败!'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'测试成功!'</span>)</span><br></pre></td></tr></table></figure></p><pre><code>测试成功!</code></pre><h4 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h4><p>继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写。</p><p>动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#继承与多态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animals</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animals is running...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dogs</span><span class="params">(Animals)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Dogs is running...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cats</span><span class="params">(Animals)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">dog = Dogs()</span><br><span class="line">dog.run()       <span class="comment">#子类的run()覆盖了父类的run()，多态</span></span><br><span class="line">cat = Cats()   <span class="comment">#子类继承父类的run()，继承</span></span><br><span class="line">cat.run()</span><br><span class="line"></span><br><span class="line"><span class="comment">#鸭子类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Start...'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_twice</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x.run()</span><br><span class="line">run_twice(Dogs())</span><br><span class="line">run_twice(Timer()) <span class="comment">#动态语言，只要两个类都有run()方法就可以</span></span><br><span class="line">dir(dog)</span><br></pre></td></tr></table></figure><pre><code>Dogs is running...Animals is running...Dogs is running...Start...[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;run&#39;]</code></pre><h4 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h4><p>type()函数，返回对应的class类型，也可以使用该函数的常量判断一个对象是否是函数。</p><blockquote><p>>&gt; type(fn)==types.FunctionType<br>True<br>>&gt; type(abs)==types.BuiltinFunctionType<br>True<br>>&gt; type(lambda x: x)==types.LambdaType<br>True<br>>&gt; type((x for x in range(10)))==types.GeneratorType<br>True  </p></blockquote><p>对于class的继承关系来说，isinstance()函数,可以判断class的类型。</p><p>dir()函数，获得一个对象的所有属性和方法，返回一个包含字符串的list。  </p><p>配合getattr()、setattr()以及hasattr()，我们可以直接操作一个对象的状态。    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(type(<span class="number">123</span>))</span><br><span class="line">print(type(<span class="string">'123'</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myobject</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = <span class="number">9</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.x * self.x</span><br><span class="line">obj = Myobject()</span><br><span class="line">print(hasattr(obj,<span class="string">'x'</span>))  <span class="comment">#是否含有这个属性</span></span><br><span class="line">print(getattr(obj,<span class="string">'x'</span>))   <span class="comment">#获得该属性值</span></span><br><span class="line">setattr(obj,<span class="string">'y'</span>,<span class="string">'10'</span>)     <span class="comment">#设置一个属性y</span></span><br><span class="line">print(obj.y)      <span class="comment">#获取属性y</span></span><br><span class="line">obj2 = Myobject()</span><br><span class="line">print(hasattr(obj2,<span class="string">'y'</span>))    <span class="comment">#obj2没有属性y</span></span><br><span class="line">print(getattr(obj2,<span class="string">'y'</span>,<span class="number">404</span>))   <span class="comment">#属性y不存在的话，默认显示404</span></span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;int&#39;&gt;&lt;class &#39;str&#39;&gt;True910False404</code></pre><h4 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了统计学生人数，可以给Student类增加一个类属性，每创建一个实例，该属性自动增加</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        Student.count+=<span class="number">1</span>   <span class="comment">#每创建一个实例，该属性自动增加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">if</span> Student.count != <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    bart = Student(<span class="string">'Bart'</span>)</span><br><span class="line">    <span class="keyword">if</span> Student.count != <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">'测试失败!'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        lisa = Student(<span class="string">'Bart'</span>)</span><br><span class="line">        <span class="keyword">if</span> Student.count != <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'测试失败!'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'Students:'</span>, Student.count)</span><br><span class="line">            print(<span class="string">'测试通过!'</span>)</span><br></pre></td></tr></table></figure><pre><code>0Students: 2测试通过!</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;面向对象编程&quot;&gt;&lt;a href=&quot;#面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;面向对象编程&quot;&gt;&lt;/a&gt;面向对象编程&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;回顾&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="继承" scheme="http://www.cphoenix.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="多态" scheme="http://www.cphoenix.cn/tags/%E5%A4%9A%E6%80%81/"/>
    
      <category term="鸭子类型" scheme="http://www.cphoenix.cn/tags/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day7</title>
    <link href="http://www.cphoenix.cn/2019/06/04/python-20190604/"/>
    <id>http://www.cphoenix.cn/2019/06/04/python-20190604/</id>
    <published>2019-06-04T01:52:39.000Z</published>
    <updated>2019-06-12T07:04:00.178Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模块（Module）"><a href="#模块（Module）" class="headerlink" title="模块（Module）"></a>模块（Module）</h3><p>Python中一个.py文件就称为一个模块。模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用。<br>每一个包目录下面都会有一个<em>init</em>.py的文件，这个文件<strong>必须存在</strong>。<br><a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="noopener">Python所有内置函数</a><br><strong>作用域</strong><br>模块内部使用，通过前缀<font color="e32636">_</font>实现,最好不要直接引用。<font color="e32636">（private）</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env/ python3</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'非公开函数'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">public</span><span class="params">()</span>:</span>  </span><br><span class="line">    print(<span class="string">'调用非公开函数：'</span>)</span><br><span class="line">    <span class="keyword">return</span> _private()</span><br><span class="line">print(public())</span><br></pre></td></tr></table></figure><pre><code>调用非公开函数：非公开函数</code></pre><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><h4 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h4><p>类名通常是大写开头的单词，class后面接类名，紧接着是(object)，表示该类是从哪个类继承下来的，通常没有合适的类就用object类，这是所有类最终都会继承的类。<br>特殊方法“__init__”前后分别有两个下划线，第一个参数永远是self，表示创建的实例本身，因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。<br>有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去。<br>Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同。<br>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">        self.__age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printScore</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s :%s'</span>%(self.name,self.score))   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getGrade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.score&gt;=<span class="number">90</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">        <span class="keyword">elif</span> self.score&gt;=<span class="number">80</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">        <span class="keyword">elif</span> self.score&gt;=<span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'C'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'D'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAge</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line">lisa = Student(<span class="string">'Lisa'</span>,<span class="number">98</span>,<span class="number">18</span>)</span><br><span class="line">lisa.printScore()</span><br><span class="line">bart = Student(<span class="string">'Bart'</span>,<span class="number">80</span>,<span class="number">20</span>)</span><br><span class="line">print(bart.getGrade())</span><br><span class="line">lisa.getAge()   <span class="comment">#外部不能直接访问lisa.__age属性了</span></span><br></pre></td></tr></table></figure><pre><code>Lisa :98B18</code></pre><p>PS:今天有点忙了，就看了一点，😁</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;模块（Module）&quot;&gt;&lt;a href=&quot;#模块（Module）&quot; class=&quot;headerlink&quot; title=&quot;模块（Module）&quot;&gt;&lt;/a&gt;模块（Module）&lt;/h3&gt;&lt;p&gt;Python中一个.py文件就称为一个模块。模块是一组Python代码的集合
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="类和实例" scheme="http://www.cphoenix.cn/tags/%E7%B1%BB%E5%92%8C%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day6</title>
    <link href="http://www.cphoenix.cn/2019/06/03/python-20190603/"/>
    <id>http://www.cphoenix.cn/2019/06/03/python-20190603/</id>
    <published>2019-06-03T01:41:12.000Z</published>
    <updated>2019-06-12T07:03:55.066Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h4 id="过滤（filter）"><a href="#过滤（filter）" class="headerlink" title="过滤（filter）"></a>过滤（filter）</h4><p>filter()函数用于过滤序列，依次作用于每个元素，根据返回值是True或False决定保留还是丢弃该元素。<br>filter()函数返回的是一个Iterator，也就是一个惰性序列，所以要强迫filter()完成计算结果，需要用list()函数获得所有结果并返回list。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用filter求素数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_odd_iter</span><span class="params">()</span>:</span>   <span class="comment">#构建一个生成器，无限奇数序列</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        n = n + <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_not_div</span><span class="params">(n)</span>:</span>   <span class="comment">#定义一个筛选函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x : x % n &gt; <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span><span class="params">()</span>:</span>       <span class="comment">#定义一个生成器，不断返回下一个素数</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    it = _odd_iter()    <span class="comment">#初始序列</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        n = next(it)</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        it = filter(_not_div(n),it)</span><br><span class="line">l=[]</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> primes():</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">100</span>:</span><br><span class="line">        l.append(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure><pre><code>[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span><span class="params">(n)</span>:</span>  </span><br><span class="line">    <span class="keyword">return</span>  n==int(str(n)[::<span class="number">-1</span>])   <span class="comment">#判断倒序是否等于正序</span></span><br><span class="line">output = filter(is_palindrome, range(<span class="number">1</span>, <span class="number">200</span>))</span><br><span class="line">print(<span class="string">'1~200:'</span>, list(output))</span><br><span class="line"><span class="keyword">if</span> list(filter(is_palindrome, range(<span class="number">1</span>, <span class="number">200</span>))) == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">111</span>, <span class="number">121</span>, <span class="number">131</span>, <span class="number">141</span>, <span class="number">151</span>, <span class="number">161</span>, <span class="number">171</span>, <span class="number">181</span>, <span class="number">191</span>]:</span><br><span class="line">    print(<span class="string">'测试成功!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure><pre><code>1~200: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191]测试成功!</code></pre><h4 id="排序（sorted）"><a href="#排序（sorted）" class="headerlink" title="排序（sorted）"></a>排序（sorted）</h4><p>内置的sorted函数可以对list进行排序，还可以接受一个<strong>key</strong>函数来实现自定义的顺序，key指定的函数作用于list的每一个元素上，并根据key函数返回的结果进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sorted</span></span><br><span class="line">print(sorted([<span class="number">3</span>,<span class="number">-234</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">23</span>,<span class="number">17</span>],key=abs))  <span class="comment">#引用绝对值函数</span></span><br><span class="line">print(sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower,reverse=<span class="keyword">True</span>))  <span class="comment">#reverse 实现反向排序</span></span><br></pre></td></tr></table></figure><pre><code>[3, 5, 6, 17, 23, -234][&#39;Zoo&#39;, &#39;Credit&#39;, &#39;bob&#39;, &#39;about&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按名字排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_name</span><span class="params">(t)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#按成绩从高到低排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_score</span><span class="params">(t)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> -t[<span class="number">1</span>]</span><br><span class="line">L = [(<span class="string">'Bob'</span>, <span class="number">75</span>), (<span class="string">'Adam'</span>, <span class="number">92</span>), (<span class="string">'Bart'</span>, <span class="number">66</span>), (<span class="string">'Lisa'</span>, <span class="number">88</span>)]</span><br><span class="line">print(sorted(L,key=by_name))</span><br><span class="line">print(sorted(L,key=by_score))</span><br></pre></td></tr></table></figure><pre><code>[(&#39;Adam&#39;, 92), (&#39;Bart&#39;, 66), (&#39;Bob&#39;, 75), (&#39;Lisa&#39;, 88)][(&#39;Adam&#39;, 92), (&#39;Lisa&#39;, 88), (&#39;Bob&#39;, 75), (&#39;Bart&#39;, 66)]</code></pre><h3 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h3><p>一个函数可以返回一个计算结果，也可以返回一个函数。<br>返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">             <span class="keyword">return</span> i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line">print(f1())</span><br><span class="line">print(f2())</span><br><span class="line">print(f3())</span><br></pre></td></tr></table></figure><pre><code>999</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用闭包返回一个计数器函数，每次调用它返回递增整数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createCounter</span><span class="params">()</span>:</span></span><br><span class="line">    a=<span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> a    <span class="comment">#使用外层变量</span></span><br><span class="line">        a +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line">counterA = createCounter()</span><br><span class="line">print(counterA(), counterA(), counterA(), counterA(), counterA())</span><br></pre></td></tr></table></figure><pre><code>1 2 3 4 5</code></pre><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>关键字<strong>lambda</strong>表示匿名函数，只能有一个表达式  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A=list(map(<span class="keyword">lambda</span> x : x * x,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))</span><br><span class="line">L = list(filter(<span class="keyword">lambda</span> n : n % <span class="number">2</span> == <span class="number">1</span>, range(<span class="number">1</span>, <span class="number">20</span>)))</span><br><span class="line">print(A)</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><pre><code>[1, 4, 9, 16, 25][1, 3, 5, 7, 9, 11, 13, 15, 17, 19]</code></pre><h3 id="装饰器（Decorator）"><a href="#装饰器（Decorator）" class="headerlink" title="装饰器（Decorator）"></a>装饰器（Decorator）</h3><p>没看懂学习资料里这块的内容🙍，网上查了下，写一点自己对装饰器的理解～装饰器就是可以给任意的函数加点东西，用新的功能包装一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简单版</span></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(fn)</span>:</span>    <span class="comment">#被装饰的函数作为参数传入</span></span><br><span class="line">    print(<span class="string">'我是装饰！！！装饰的函数是：%s'</span>%fn.__name__)    <span class="comment">#作为装饰</span></span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'这里需要装饰一下。。'</span>)</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><pre><code>我是装饰！！！装饰的函数是：fn这里需要装饰一下。。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#练习，请设计一个decorator，它可作用于任何函数上，并打印该函数的执行时间</span></span><br><span class="line"><span class="keyword">import</span> functools,datetime,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(fn)</span>:</span>    </span><br><span class="line"><span class="meta">        @functools.wraps(fn)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kw)</span>:</span>    <span class="comment">#可以接受任意参数的调用,该函数作为装饰</span></span><br><span class="line">            print(<span class="string">'执行的函数：%s 执行的时间 ：%s %s'</span>%(fn.__name__,datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>),text))  </span><br><span class="line">            <span class="keyword">return</span> fn(*args,**kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('测试带参数1～')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fast</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.0012</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('测试带参数2~')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slow</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.1234</span>)</span><br><span class="line">    <span class="keyword">return</span> x * y * z;</span><br><span class="line">f = fast(<span class="number">11</span>, <span class="number">22</span>)</span><br><span class="line">print(f)</span><br><span class="line">s = slow(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>)</span><br><span class="line">print(s)</span><br><span class="line"><span class="keyword">if</span> f != <span class="number">33</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br><span class="line"><span class="keyword">elif</span> s != <span class="number">7986</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure><pre><code>执行的函数：fast 执行的时间 ：2019-06-04 09:36:24 测试带参数1～33执行的函数：slow 执行的时间 ：2019-06-04 09:36:24 测试带参数2~7986</code></pre><h3 id="偏函数（partial）"><a href="#偏函数（partial）" class="headerlink" title="偏函数（partial）"></a>偏函数（partial）</h3><p>函数：functools.partial()<br>当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#偏函数</span></span><br><span class="line">int2=functools.partial(int,base=<span class="number">8</span>)   <span class="comment">#字符8进制转换</span></span><br><span class="line">print(int2(<span class="string">'12345'</span>))</span><br><span class="line">max2=functools.partial(max,<span class="number">10</span>)    <span class="comment">#会把10加入比较</span></span><br><span class="line">print(max2(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><pre><code>534910</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;高阶函数&quot;&gt;&lt;a href=&quot;#高阶函数&quot; class=&quot;headerlink&quot; title=&quot;高阶函数&quot;&gt;&lt;/a&gt;高阶函数&lt;/h3&gt;&lt;h4 id=&quot;过滤（filter）&quot;&gt;&lt;a href=&quot;#过滤（filter）&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="过滤" scheme="http://www.cphoenix.cn/tags/%E8%BF%87%E6%BB%A4/"/>
    
      <category term="排序" scheme="http://www.cphoenix.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="lambda" scheme="http://www.cphoenix.cn/tags/lambda/"/>
    
      <category term="装饰器" scheme="http://www.cphoenix.cn/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="偏函数" scheme="http://www.cphoenix.cn/tags/%E5%81%8F%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day5</title>
    <link href="http://www.cphoenix.cn/2019/05/31/python-20190531/"/>
    <id>http://www.cphoenix.cn/2019/05/31/python-20190531/</id>
    <published>2019-05-31T01:27:30.000Z</published>
    <updated>2019-06-12T07:03:49.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="列表生成式（List-Comprehensions）"><a href="#列表生成式（List-Comprehensions）" class="headerlink" title="列表生成式（List Comprehensions）"></a>列表生成式（List Comprehensions）</h3><p>列表生成式时，把要生成的元素放到前面，后面跟for循环，就可以把list创建出来。   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print([x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x%<span class="number">2</span> == <span class="number">0</span>])  <span class="comment">#可以加if判断</span></span><br><span class="line">print([m+n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'DEF'</span>])   <span class="comment">#两层循环</span></span><br><span class="line">d = &#123;<span class="string">'a'</span>:<span class="string">'A'</span>,<span class="string">'b'</span>:<span class="string">'B'</span>,<span class="string">'c'</span>:<span class="string">'C'</span>&#125;</span><br><span class="line">print([k+<span class="string">'='</span>+v <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items()])  <span class="comment">#用两个变量生成list</span></span><br><span class="line">L=[<span class="string">'MARK'</span>,<span class="string">'SANDY'</span>,<span class="string">'SOPHIA'</span>]</span><br><span class="line">print([s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L])</span><br></pre></td></tr></table></figure><pre><code>[4, 16, 36, 64, 100][&#39;AD&#39;, &#39;AE&#39;, &#39;AF&#39;, &#39;BD&#39;, &#39;BE&#39;, &#39;BF&#39;, &#39;CD&#39;, &#39;CE&#39;, &#39;CF&#39;][&#39;a=A&#39;, &#39;b=B&#39;, &#39;c=C&#39;][&#39;mark&#39;, &#39;sandy&#39;, &#39;sophia&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现列表所有字符串小写</span></span><br><span class="line">L = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="number">18</span>, <span class="string">'Apple'</span>, <span class="keyword">None</span>]</span><br><span class="line">[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L <span class="keyword">if</span> isinstance(s,str)]</span><br></pre></td></tr></table></figure><pre><code>[&#39;hello&#39;, &#39;world&#39;, &#39;apple&#39;]</code></pre><h3 id="生成器（generator）"><a href="#生成器（generator）" class="headerlink" title="生成器（generator）"></a>生成器（generator）</h3><ol><li>把一个列表生成式的[]改成()，就创建了一个generator。</li><li>如果一个函数中包含<strong>yield</strong>关键字，那么这个函数就不再是一个普通函数，而是一个generator。调用函数就是创建了一个生成器（generator）。<br>yield相当于 return 返回一个值，并且记住这个返回的位置，下次迭代时，代码从yield的下一条语句开始执行 。   </li><li>抛出StopIteration错误表示无法继续返回下一个值了</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成器</span></span><br><span class="line">g=(x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>))  <span class="comment">#generater和list的区别是最外层的括号。g是(),list是[]</span></span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))<span class="comment">#每次调用next(),是下一个元素的值</span></span><br><span class="line">print([i <span class="keyword">for</span> i <span class="keyword">in</span> g]) <span class="comment">#利用循环打印所有g的值</span></span><br></pre></td></tr></table></figure><pre><code>14[9, 16, 25, 36, 49, 64, 81, 100]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line">    a=<span class="number">0</span></span><br><span class="line">    b=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n&lt;max:</span><br><span class="line">        <span class="keyword">yield</span> b  <span class="comment">#定义中包含yield关键字，该函数就是generator</span></span><br><span class="line">        a,b=b,a+b</span><br><span class="line">        n+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'done'</span></span><br><span class="line">print([i <span class="keyword">for</span> i <span class="keyword">in</span> fib(<span class="number">4</span>)])</span><br></pre></td></tr></table></figure><pre><code>[1, 1, 2, 3]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'step 1'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">'step 2'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span> </span><br><span class="line">    print(<span class="string">'step 3'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span></span><br><span class="line">o=odd()</span><br><span class="line">print(next(o))</span><br><span class="line">print(next(o))</span><br><span class="line">print(next(o))</span><br></pre></td></tr></table></figure><pre><code>step 11step 22step 35</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#杨辉三角</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">()</span>:</span></span><br><span class="line">    p = [<span class="number">1</span>]       </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> p         </span><br><span class="line">        p =[<span class="number">1</span>]+[p[x]+p[x+<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> range(len(p)<span class="number">-1</span>)]+[<span class="number">1</span>]   <span class="comment">#这行看了好久才看懂。。p=[1,3,3,1]   x=0,1,2</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> triangles():</span><br><span class="line">    print(t)</span><br><span class="line">    results.append(t)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><pre><code>[1][1, 1][1, 2, 1][1, 3, 3, 1][1, 4, 6, 4, 1][1, 5, 10, 10, 5, 1]</code></pre><h3 id="迭代器（Iterator）"><a href="#迭代器（Iterator）" class="headerlink" title="迭代器（Iterator）"></a>迭代器（Iterator）</h3><p>可以判断一个对象是否为可迭代对象：isinstance([],Iterable)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line">isinstance([],Iterable)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><ol><li>凡是可以作用于for循环的对象都是Iterable类型；  </li><li>可作用于next()函数的对象都是Iterator类型  </li><li>集合数据类型如list、dict、str等都是Iterable，不是Iterator，可以通过iter()函数获得一个Iterator对象  </li></ol><h3 id="函数式编程（Functional-Programing）"><a href="#函数式编程（Functional-Programing）" class="headerlink" title="函数式编程（Functional Programing）"></a>函数式编程（Functional Programing）</h3><p><strong>特点</strong>：允许把函数本身作为一个参数传入另一个参数，还允许返回一个函数。抽象度高，贴近计算，执行效率低 。<br>Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。  </p><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p>函数本身可以赋值给变量，变量可以指向函数。   </p><font color="49c18a">一个函数可以接受另一个函数做参数，那么这个函数就叫高阶函数。</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#高阶函数</span></span><br><span class="line">f=abs</span><br><span class="line">f(<span class="number">-10</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y,f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> f(x)+f(y)</span><br><span class="line">print(add(<span class="number">-1</span>,<span class="number">-6</span>,abs))</span><br></pre></td></tr></table></figure><pre><code>7</code></pre><h5 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h5><p>map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#map</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line">r=map(f,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">list(r)</span><br></pre></td></tr></table></figure><pre><code>[1, 4, 9, 16, 25]</code></pre><p>reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#reduce</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">reduce(add,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure><pre><code>15</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x,y)</span>:</span>   <span class="comment">#输出一个整数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>*x+y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span>     <span class="comment">#数值与字符对应转换</span></span><br><span class="line">        digits=&#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> digits[s]</span><br><span class="line">    <span class="keyword">return</span> reduce(fn,map(char2num,s))</span><br><span class="line">str2int(<span class="string">'1234'</span>)</span><br></pre></td></tr></table></figure><pre><code>1234</code></pre><blockquote><p>练习  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用map()函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：['adam', 'LISA', 'barT']，输出：['Adam', 'Lisa', 'Bart']</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> l[<span class="number">0</span>].upper()+l[<span class="number">1</span>:].lower()</span><br><span class="line">L1 = [<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>]</span><br><span class="line">L2 = list(map(normalize, L1))</span><br><span class="line">print(L2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请编写一个prod()函数，可以接受一个list并利用reduce()求积</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prod</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x,y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x*y</span><br><span class="line">    <span class="keyword">return</span> reduce(mul,l)</span><br><span class="line">print(<span class="string">'3 * 5 * 7 * 9 ='</span>, prod([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用map和reduce编写一个str2float函数，把字符串'123.456'转换成浮点数123.456</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2float</span><span class="params">(s)</span>:</span></span><br><span class="line">    s1,s2 = s.split(<span class="string">'.'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x,y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>*x+y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></span><br><span class="line">        digits = &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> digits[s]  </span><br><span class="line">    <span class="keyword">return</span> reduce(fn,map(char2num,s1))+reduce(fn,map(char2num,s2))/(<span class="number">10</span>*len(s2))</span><br><span class="line">print(str2float(<span class="string">'1234.45'</span>))</span><br></pre></td></tr></table></figure><pre><code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]3 * 5 * 7 * 9 = 9451236.25</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;列表生成式（List-Comprehensions）&quot;&gt;&lt;a href=&quot;#列表生成式（List-Comprehensions）&quot; class=&quot;headerlink&quot; title=&quot;列表生成式（List Comprehensions）&quot;&gt;&lt;/a&gt;列表生成式（Li
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="列表生成式" scheme="http://www.cphoenix.cn/tags/%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/"/>
    
      <category term="生成器" scheme="http://www.cphoenix.cn/tags/%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
      <category term="迭代器" scheme="http://www.cphoenix.cn/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
      <category term="map/reduce" scheme="http://www.cphoenix.cn/tags/map-reduce/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day4</title>
    <link href="http://www.cphoenix.cn/2019/05/30/python-20190530/"/>
    <id>http://www.cphoenix.cn/2019/05/30/python-20190530/</id>
    <published>2019-05-30T01:15:30.000Z</published>
    <updated>2019-06-12T07:03:42.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><p><font color="e32636">代码越少越好！越简单越好！</font>  </p><h4 id="切片（Slice）"><a href="#切片（Slice）" class="headerlink" title="切片（Slice）"></a>切片（Slice）</h4><p>根据索引取list或tuple的部分元素<br>list、tuple、字符串都可以使用切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切片</span></span><br><span class="line">L = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>]</span><br><span class="line">print(L[<span class="number">0</span>:<span class="number">3</span>])   <span class="comment">#从索引0开始，到索引3但不包括索引3</span></span><br><span class="line">M = list(range(<span class="number">20</span>))</span><br><span class="line">print(M)</span><br><span class="line">print(M[<span class="number">-4</span>:<span class="number">-1</span>])  <span class="comment">#倒数第一个元素的索引是-1</span></span><br><span class="line">print(M[:<span class="number">10</span>:<span class="number">2</span>])  <span class="comment">#前10个数，每两个取一个</span></span><br><span class="line">print(M[::<span class="number">5</span>])   <span class="comment">#所有数，每五个取一个</span></span><br><span class="line">print(len(M))</span><br><span class="line">print(M[len(M)<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><pre><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;][0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19][16, 17, 18][0, 2, 4, 6, 8][0, 5, 10, 15]2019</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现一个trim()函数，去除字符串首尾的空格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trim</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> string[<span class="number">0</span>] == <span class="string">' '</span> <span class="keyword">and</span> string[len(string)<span class="number">-1</span>] == <span class="string">' '</span>:</span><br><span class="line">        <span class="keyword">return</span> string[<span class="number">1</span>:len(string)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">elif</span> string[<span class="number">0</span>] == <span class="string">' '</span>:</span><br><span class="line">        <span class="keyword">return</span> string[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">elif</span> string[len(string)<span class="number">-1</span>] == <span class="string">' '</span>:</span><br><span class="line">        <span class="keyword">return</span> string[<span class="number">0</span>:len(string)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> string</span><br><span class="line">print(trim(<span class="string">' ABCD '</span>))</span><br><span class="line">print(trim(<span class="string">' ABCD'</span>))</span><br><span class="line">print(trim(<span class="string">'ABCD '</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#去掉所有空格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trim2</span><span class="params">(string)</span>:</span></span><br><span class="line">    length = len(string)</span><br><span class="line">    start = <span class="number">-1</span></span><br><span class="line">    end = length - <span class="number">1</span></span><br><span class="line">    return_str = []</span><br><span class="line">    <span class="keyword">while</span> start &lt; end:</span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> string[start] == <span class="string">' '</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            return_str.append(string[start]) <span class="comment">#序列转化字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(return_str)</span><br><span class="line">print(<span class="string">'原字符串:"          A B  C DE   "'</span>) </span><br><span class="line">print(<span class="string">'去掉所有空格: "%s%s'</span>%(trim2(<span class="string">'          A B  C DE   '</span>),<span class="string">'"'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#去除字符串前后任意多空格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trim3</span><span class="params">(string)</span>:</span></span><br><span class="line">    length = len(string)</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        <span class="keyword">if</span> string[start] == <span class="string">' '</span>:</span><br><span class="line">            start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> string[end] == <span class="string">' '</span>:</span><br><span class="line">            end -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> start &gt; end:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> string[start:end+<span class="number">1</span>]</span><br><span class="line">print(<span class="string">'去除字符串前后任意多空格:"%s%s'</span>%(trim3(<span class="string">'          A B  C DE   '</span>),<span class="string">'"'</span>))</span><br></pre></td></tr></table></figure><pre><code>ABCDABCDABCD原字符串:&quot;          A B  C DE   &quot;去掉所有空格: &quot;ABCDE&quot;去除字符串前后任意多空格:&quot;A B  C DE&quot;</code></pre><h4 id="迭代（Iteration）"><a href="#迭代（Iteration）" class="headerlink" title="迭代（Iteration）"></a>迭代（Iteration）</h4><p>给定一个list或者tuple，通过for循环来遍历这个list或tuple，叫做迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用迭代查找一个list中最小和最大值，并返回一个tuple</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMinAndMax</span><span class="params">(L)</span>:</span></span><br><span class="line">    max=min=<span class="keyword">None</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> L:</span><br><span class="line">       <span class="keyword">if</span> min==<span class="keyword">None</span> <span class="keyword">or</span> min&gt;n:</span><br><span class="line">          min=n</span><br><span class="line">       <span class="keyword">if</span> max==<span class="keyword">None</span> <span class="keyword">or</span> max&lt;n:</span><br><span class="line">          max=n</span><br><span class="line">    <span class="keyword">return</span> (min,max)</span><br><span class="line">print(findMinAndMax([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]))</span><br></pre></td></tr></table></figure><pre><code>(1, 6)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;高级特性&quot;&gt;&lt;a href=&quot;#高级特性&quot; class=&quot;headerlink&quot; title=&quot;高级特性&quot;&gt;&lt;/a&gt;高级特性&lt;/h3&gt;&lt;p&gt;&lt;font color=&quot;e32636&quot;&gt;代码越少越好！越简单越好！&lt;/font&gt;  &lt;/p&gt;
&lt;h4 id=&quot;切片（Sli
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="切片" scheme="http://www.cphoenix.cn/tags/%E5%88%87%E7%89%87/"/>
    
      <category term="迭代" scheme="http://www.cphoenix.cn/tags/%E8%BF%AD%E4%BB%A3/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day3</title>
    <link href="http://www.cphoenix.cn/2019/05/29/python-20190529/"/>
    <id>http://www.cphoenix.cn/2019/05/29/python-20190529/</id>
    <published>2019-05-29T01:16:30.000Z</published>
    <updated>2019-06-12T07:03:17.185Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><blockquote><p>hex()  #十六进制转换<br>abs()  #求绝对值，一个参数<br>max()  #求最大值，多个参数<br>int()  #数据类型转整型<br>str()  #数据类型转字符<br>float()  #数据类型转浮点型<br>isinstance()  #数据类型检查函数</p></blockquote><p><a href="http://docs.python.org/3/library/functions.html#abs" target="_blank" rel="noopener">python内置函数</a></p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>空函数可以用来做占位符，函数体：pass  </p><p><strong>练习</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">y=input(<span class="string">'输入一个数字求绝对值：'</span>)</span><br><span class="line">z=float(y)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs_func</span><span class="params">(x)</span>:</span>   <span class="comment">#def定义函数</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">print(abs_func(z))</span><br></pre></td></tr></table></figure></p><pre><code>输入一个数字求绝对值：33.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abstest <span class="keyword">import</span> abs_func</span><br><span class="line">z=input(<span class="string">'输入一个数字求绝对值：'</span>)</span><br><span class="line">y=float(z)</span><br><span class="line">print(abs_func(y))</span><br></pre></td></tr></table></figure><pre><code>输入一个数字求绝对值：-33.0</code></pre><p><strong>可变参数</strong> 允许传入0或任意个参数，<em>args,接收的是一个tuple<br><strong>关键字参数</strong> 允许传入0或任意个含参数名的参数，<strong>kw，接收的是一个dict  </strong>命名关键字参数** 限制关键字参数的名字，需要一个特殊分隔符 ，</em>后面的参数被视为命名关键字参数<br>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算坐标</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x,y,step,angle=<span class="number">0</span>)</span>:</span>  </span><br><span class="line">    nx=x+step*math.cos(angle)</span><br><span class="line">    ny=y-step*math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx,ny</span><br><span class="line">x,y=move(<span class="number">100</span>,<span class="number">100</span>,<span class="number">60</span>,math.pi/<span class="number">6</span>)</span><br><span class="line">print(x,y)</span><br><span class="line">r=move(<span class="number">100</span>,<span class="number">100</span>,<span class="number">60</span>,math.pi/<span class="number">6</span>)  <span class="comment">#返回tuple</span></span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><pre><code>151.96152422706632 70.0(151.96152422706632, 70.0)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求一元二次方程解</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic</span><span class="params">(a, b, c)</span>:</span>    </span><br><span class="line">    m=b*b<span class="number">-4</span>*a*c</span><br><span class="line">    <span class="keyword">if</span> m&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'此题无解'</span>)</span><br><span class="line">    n=math.sqrt(m)</span><br><span class="line">    x1=(-b-n)/<span class="number">2</span>*a</span><br><span class="line">    x2=(-b+n)/<span class="number">2</span>*a</span><br><span class="line">    <span class="keyword">return</span> x1,x2</span><br><span class="line">result=quadratic(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><pre><code>(-4.0, -2.0)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算x的n次方</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x,n=<span class="number">2</span>)</span>:</span>  </span><br><span class="line">    s=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        n=n<span class="number">-1</span></span><br><span class="line">        s=s*x</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">print(power(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">print(power(<span class="number">2</span>)) <span class="comment">#默认n=2</span></span><br></pre></td></tr></table></figure><pre><code>84</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#kw关键字参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name,age,**kw)</span>:</span> </span><br><span class="line">    print(<span class="string">'name'</span>,name,<span class="string">'age'</span>,age,<span class="string">'other'</span>,kw)</span><br><span class="line">extract=&#123;<span class="string">'job'</span>:<span class="string">'teacher'</span>,<span class="string">'gender'</span>:<span class="string">'M'</span>&#125;</span><br><span class="line">person(<span class="string">'IVY'</span>,<span class="number">20</span>,**extract)</span><br></pre></td></tr></table></figure><pre><code>name IVY age 20 other {&#39;job&#39;: &#39;teacher&#39;, &#39;gender&#39;: &#39;M&#39;}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多个参数相乘</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(*args)</span>:</span>   </span><br><span class="line">    <span class="keyword">if</span> len(args)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'参数为空'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            s=s*n</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product1</span><span class="params">(x,*y)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> y:</span><br><span class="line">        x*=i</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">print(product(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(product1(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>246</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#递归函数    尾递归，防止栈溢出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> fact_iter(n,<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_iter</span><span class="params">(num,product)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> product</span><br><span class="line">    <span class="keyword">return</span> fact_iter(num<span class="number">-1</span>,num*product)</span><br><span class="line">print(fact(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><pre><code>120</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#汉诺塔</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span><span class="params">(n,a,b,c)</span>:</span>  <span class="comment">#把a柱所有的圆盘移到c柱</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        print(a,<span class="string">'--&gt;'</span>,c)  <span class="comment">#如果a柱只剩下1个圆盘，移到c柱</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hanoi(n<span class="number">-1</span>,a,c,b) <span class="comment">#剩下的n-1移到b柱</span></span><br><span class="line">        hanoi(<span class="number">1</span>,a,b,c)     <span class="comment">#a柱剩下的一个圆盘移到c柱</span></span><br><span class="line">        hanoi(n<span class="number">-1</span>,b,a,c) <span class="comment">#剩下的n-1从b柱移到c柱</span></span><br><span class="line">hanoi(<span class="number">3</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>)</span><br></pre></td></tr></table></figure><pre><code>A --&gt; CA --&gt; BC --&gt; BA --&gt; CB --&gt; AB --&gt; CA --&gt; C</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;h4 id=&quot;内置函数&quot;&gt;&lt;a href=&quot;#内置函数&quot; class=&quot;headerlink&quot; title=&quot;内置函数&quot;&gt;&lt;/a&gt;内置函数&lt;/h
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="内置函数" scheme="http://www.cphoenix.cn/tags/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    
      <category term="参数" scheme="http://www.cphoenix.cn/tags/%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day2</title>
    <link href="http://www.cphoenix.cn/2019/05/28/python-20190528/"/>
    <id>http://www.cphoenix.cn/2019/05/28/python-20190528/</id>
    <published>2019-05-28T05:59:14.000Z</published>
    <updated>2019-06-12T07:03:27.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#条件判断</span></span><br><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'Adult'</span>)</span><br><span class="line"><span class="keyword">elif</span> age&gt;<span class="number">6</span>:</span><br><span class="line">    print(<span class="string">'Teenager'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Kid'</span>)</span><br></pre></td></tr></table></figure><pre><code>Kid</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">'birth is : '</span>)</span><br><span class="line">birth = int(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    print(<span class="string">'00前'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'00后'</span>)</span><br></pre></td></tr></table></figure><pre><code>birth is : 199500前</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'格式 身高：1.75m 体重：80.5kg'</span>)</span><br><span class="line">a = input(<span class="string">'Your height : '</span>)</span><br><span class="line">b = input(<span class="string">'Your weight : '</span>)</span><br><span class="line">height = float(a)</span><br><span class="line">weight = float(b)</span><br><span class="line">bmi=weight/(height*height)</span><br><span class="line"><span class="keyword">if</span> bmi&gt;<span class="number">32</span>:</span><br><span class="line">    print(<span class="string">'Your BMI is : '</span>,bmi,<span class="string">'严重肥胖'</span>)</span><br><span class="line"><span class="keyword">elif</span> bmi&gt;<span class="number">28</span>:</span><br><span class="line">    print(<span class="string">'Your BMI is : '</span>,bmi,<span class="string">'肥胖'</span>)</span><br><span class="line"><span class="keyword">elif</span> bmi&gt;<span class="number">25</span>:</span><br><span class="line">    print(<span class="string">'Your BMI is : '</span>,bmi,<span class="string">'过重'</span>)</span><br><span class="line"><span class="keyword">elif</span> bmi&gt;<span class="number">18.5</span>:</span><br><span class="line">    print(<span class="string">'Your BMI is : '</span>,bmi,<span class="string">'正常'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Your BMI is : '</span>,bmi,<span class="string">'过轻'</span>)</span><br></pre></td></tr></table></figure><pre><code>格式 身高：1.75m 体重：80.5kgYour height : 1.75Your weight : 68Your BMI is :  22.20408163265306 正常</code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p><strong>for…in</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><pre><code>ABCD</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):  <span class="comment">#整数序列函数</span></span><br><span class="line">    sum=sum+x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><pre><code>5050</code></pre><p><strong>while</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#while</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    sum = sum + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><pre><code>2500</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Bart'</span>, <span class="string">'Lisa'</span>, <span class="string">'Adam'</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">   print(x)</span><br></pre></td></tr></table></figure><pre><code>BartLisaAdam</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;=<span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n&gt;<span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span>   <span class="comment">#提前结束循环</span></span><br><span class="line">    print(n)</span><br><span class="line">    n=n+<span class="number">1</span></span><br><span class="line">print(<span class="string">'end'</span>)</span><br></pre></td></tr></table></figure><pre><code>12345end</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n=n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span>   <span class="comment">#跳过这次循环，直接进行到下次</span></span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><pre><code>13579</code></pre><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>内置字典：dict，使用键-值（key-value）存储，具有极快的查找速度<br>和list相比，dict查找的插入速度极快，但是占用大量内存，内存浪费多<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dict</span></span><br><span class="line">d=&#123;<span class="string">'MARY'</span>:<span class="number">90</span>,</span><br><span class="line">     <span class="string">'JOHN'</span>:<span class="number">80</span>,</span><br><span class="line">     <span class="string">'ALICE'</span>:<span class="number">95</span>&#125;</span><br><span class="line">print(d)</span><br><span class="line">d[<span class="string">'MARY'</span>]=<span class="number">80</span></span><br><span class="line">print(d[<span class="string">'MARY'</span>])</span><br><span class="line">d.pop(<span class="string">'ALICE'</span>)</span><br><span class="line">print(d)</span><br><span class="line">print(d.get(<span class="string">'ALICE'</span>,<span class="number">-1</span>))</span><br></pre></td></tr></table></figure></p><pre><code>{&#39;MARY&#39;: 90, &#39;JOHN&#39;: 80, &#39;ALICE&#39;: 95}80{&#39;MARY&#39;: 80, &#39;JOHN&#39;: 80}-1</code></pre><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set也是一组key的集合，但是不存储value，set中无重复的key。创建一个set，需要提供一个list作为输入集合。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set</span></span><br><span class="line">s1=set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(s)</span><br><span class="line">s1.add(<span class="number">4</span>)</span><br><span class="line">print(s)</span><br><span class="line">s1.remove(<span class="number">4</span>)</span><br><span class="line">print(s)</span><br><span class="line">s2=set([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">print(s1&amp;s2)</span><br><span class="line">print(s1|s2)</span><br></pre></td></tr></table></figure><pre><code>{1, 2, 3}{1, 2, 3}{1, 2, 3}{3}{1, 2, 3, 4, 5}</code></pre><p><strong>小结：</strong><br><strong>条件判断格式</strong> <font color="58c689">if:</font>…<font color="58c689">elif:</font>…<font color="58c689">else:</font><br><strong>循环</strong> <strong>第一种</strong> <font color="58c689">while:</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>第二种</strong> <font color="58c689">for…in:</font><br><strong>循环控制：break，continue</strong></p><p><strong>元素可变：list，dict，set</strong><br><strong>元素不可变：tuple</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;条件判断&quot;&gt;&lt;a href=&quot;#条件判断&quot; class=&quot;headerlink&quot; title=&quot;条件判断&quot;&gt;&lt;/a&gt;条件判断&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="条件判断" scheme="http://www.cphoenix.cn/tags/%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/"/>
    
      <category term="循环" scheme="http://www.cphoenix.cn/tags/%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="dict" scheme="http://www.cphoenix.cn/tags/dict/"/>
    
      <category term="set" scheme="http://www.cphoenix.cn/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>python学习-Day1</title>
    <link href="http://www.cphoenix.cn/2019/05/27/python-20190527/"/>
    <id>http://www.cphoenix.cn/2019/05/27/python-20190527/</id>
    <published>2019-05-27T02:19:12.000Z</published>
    <updated>2019-06-12T07:03:35.007Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先进行环境安装（Mac）"><a href="#首先进行环境安装（Mac）" class="headerlink" title="首先进行环境安装（Mac）"></a><font color="b35549">首先进行环境安装（Mac）</font></h4><p>1.python安装</p><blockquote><p>brew install python<br>python -V  &nbsp; //版本查看</p></blockquote><p>2.jupyter安装</p><blockquote><p>pip3 install jupyter<br>jupyter notebook &nbsp;  //启动服务  </p></blockquote><h4 id="环境配置好后，小白开始学习python啦～"><a href="#环境配置好后，小白开始学习python啦～" class="headerlink" title="环境配置好后，小白开始学习python啦～"></a><font color="b35549">环境配置好后，小白开始学习python啦～</font></h4><p>[python学习资料链接]（<a href="https://www.liaoxuefeng.com/wiki/1016959663602400）" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400）</a>  </p><h4 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a><font color="b35549">python基础</font></h4><p>注释用#标记，转义字符用\标记<br>等号=是赋值语句，可以把任意数据类型赋值给变量，同一变量可以被反复赋值，且可以是不同类型的变量。动态语言。  </p><p>格式化字符串：<font color="4c8cd2">%</font>  </p><p><font color="4c8cd2">%s</font> 表示用字符串替换；</p><p><font color="4c8cd2">%d</font> 表示用整数替换</p><p><font color="4c8cd2">%f</font> 表示用浮点数替换</p><blockquote><p>练习<br>>&gt; print(‘hello,%s~ %d day fighting!’%(‘cuify’,1))<br>hello,cuify~ 1 day fighting!  </p></blockquote><p><strong>list</strong><br>有序列表，可以随时添加和删除其中的元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#list</span></span><br><span class="line">classmates=[<span class="string">'TOM'</span>,<span class="string">'JACK'</span>,<span class="string">'MARY'</span>]</span><br><span class="line">classmates.append(<span class="string">'ALICE'</span>) <span class="comment">#添加元素</span></span><br><span class="line">classmates.insert(<span class="number">1</span>,<span class="string">'JOHN'</span>)  <span class="comment">#插入元素</span></span><br><span class="line">print(classmates)</span><br><span class="line">classmates.pop(<span class="number">1</span>) <span class="comment">#pop(i) i是索引位置，没写的话会删除最后一个元素</span></span><br><span class="line">print(classmates)</span><br><span class="line">classmates[<span class="number">1</span>]=<span class="string">'IVY'</span></span><br><span class="line">print(classmates)</span><br></pre></td></tr></table></figure></p><pre><code>[&#39;TOM&#39;, &#39;JOHN&#39;, &#39;JACK&#39;, &#39;MARY&#39;, &#39;ALICE&#39;][&#39;TOM&#39;, &#39;JACK&#39;, &#39;MARY&#39;, &#39;ALICE&#39;][&#39;TOM&#39;, &#39;IVY&#39;, &#39;MARY&#39;, &#39;ALICE&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s=[<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'peach'</span>]</span><br><span class="line">p=[<span class="string">'watermelon'</span>,s,<span class="string">'grape'</span>]   </span><br><span class="line">print(p)</span><br></pre></td></tr></table></figure><pre><code>[&#39;watermelon&#39;, [&#39;apple&#39;, &#39;banana&#39;, &#39;peach&#39;], &#39;grape&#39;]</code></pre><p><strong>tuple</strong><br>有序列表，一旦初始化就不能修改。tuple的元素不变指的是tuple的每个元素，指向永不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tuple</span></span><br><span class="line">classmates=(<span class="string">'TOM'</span>,<span class="string">'JACK'</span>,<span class="string">'MARY'</span>)</span><br><span class="line">print(classmates)</span><br></pre></td></tr></table></figure><pre><code>(&#39;TOM&#39;, &#39;JACK&#39;, &#39;MARY&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s=(<span class="string">'a'</span>,<span class="string">'b'</span>,[<span class="string">'X'</span>,<span class="string">'Y'</span>],<span class="string">'c'</span>)</span><br><span class="line">print(s)</span><br><span class="line">s[<span class="number">2</span>][<span class="number">0</span>]= <span class="string">'D'</span></span><br><span class="line">print(s)</span><br><span class="line">s[<span class="number">1</span>]=<span class="string">'r'</span>  <span class="comment">#元素不可替换</span></span><br></pre></td></tr></table></figure><pre><code>(&#39;a&#39;, &#39;b&#39;, [&#39;X&#39;, &#39;Y&#39;], &#39;c&#39;)(&#39;a&#39;, &#39;b&#39;, [&#39;D&#39;, &#39;Y&#39;], &#39;c&#39;)---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-62-e6a11ff7e543&gt; in &lt;module&gt;      3 s[2][0]= &#39;D&#39;      4 print(s)----&gt; 5 s[1]=&#39;r&#39;TypeError: &#39;tuple&#39; object does not support item assignment</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;首先进行环境安装（Mac）&quot;&gt;&lt;a href=&quot;#首先进行环境安装（Mac）&quot; class=&quot;headerlink&quot; title=&quot;首先进行环境安装（Mac）&quot;&gt;&lt;/a&gt;&lt;font color=&quot;b35549&quot;&gt;首先进行环境安装（Mac）&lt;/font&gt;&lt;/h4&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.cphoenix.cn/tags/python/"/>
    
      <category term="list" scheme="http://www.cphoenix.cn/tags/list/"/>
    
      <category term="tuple" scheme="http://www.cphoenix.cn/tags/tuple/"/>
    
  </entry>
  
  <entry>
    <title>数据库系统工程师软考知识点整理</title>
    <link href="http://www.cphoenix.cn/2019/05/23/%E8%BD%AF%E8%80%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>http://www.cphoenix.cn/2019/05/23/软考知识点整理/</id>
    <published>2019-05-23T02:29:12.000Z</published>
    <updated>2019-07-11T06:17:37.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库系统工程师-软考知识点整理"><a href="#数据库系统工程师-软考知识点整理" class="headerlink" title=" 数据库系统工程师-软考知识点整理 "></a><font color="#8968CD" size="5"> 数据库系统工程师-软考知识点整理 </font></h2><h3 id="💯"><a href="#💯" class="headerlink" title="💯"></a><font color="#8B3A62">💯</font></h3><p>1.音频数字化过程中采样频率应为声音最高频率2倍</p><p>2.编译过程：词法分析阶段&gt;语法分析阶段&gt;语义分析阶段&gt;中间代码生成&gt;目标代码生成</p><p>3.面向对象方法中的多态：不同类的对象对同一消息做出不同响应。三个条件为有继承关系、子类重写父类方法、父类引用指向子类对象</p><p>4.外模式/模式：数据与程序的逻辑独立性，简称数据的逻辑独立性<br>  模式/内模式：数据与程序的物理独立性，简称数据的物理独立性</p><p>5.数据模型三要素：数据结构、数据操纵、完整性约束</p><p>6.候选码只出现在左边  </p><p>7.无损连接性判断：存在R1∩R2-&gt;R1-R2或R1∩R2-&gt;R2-R1被F逻辑蕴含的情况，则具有无损连接性<br>无损联接分解是将一个关系模式分解成若干个关系模式后，通过自然联接和投影等运算仍能还原到原来的关系模式，则称这种分解为无损联接分解。 </p><p>8.满足函数依赖的条件：分解后所有的关系模式加起来和原先的关系模式中的函数依赖是一样的</p><p>9.数据库概念结构设计阶段：抽象&gt;设计局部视图&gt;合并取消冲突&gt;修改重构消除冗余</p><p>10.路由策略：为了改变网络流量所经过的途径而修改路由信息的技术</p><p>11.网络层次与主要设备对应关系： 网络层-路由器，数据链路层-网桥、交换机，传输层和会话层-软件功能</p><p>12.I/O设备管理软件一般分4层：中断处理程序、设备驱动程序、与设备无关的系统软件和用户级软件</p><p>13.假如关系R和S的元数分别为r和s，那么他们的笛卡儿积就是r+s的元组组合，而若R有m个元组，S有n个元组，则R×S应有m*n个元组</p><p>14.脏读：读取未提交数据<br>&emsp;&nbsp;不可重复读：前后多次读取，读取内容不一致<br>&emsp;&nbsp;幻影读：前后多次读取，读取数据总量不一致</p><p>15.部分函数依赖：设X,Y是关系R的两个属性集合，存在X→Y，若X’是X的真子集，存在X’→Y，则称Y部分函数依赖于X。<br>举个例子：通过AB能得出C，通过A也能得出C，通过B也能得出C，那么说C部分依赖于AB。</p><p>完全函数依赖：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。<br>举个例子：通过AB能得出C，但是AB单独得不出C，那么说C完全依赖于AB.</p><p>传递函数依赖：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z，则称Z传递函数依赖于X。<br>举个例子：通过A得到B，通过B得到C，但是C得不到B，B得不到A，那么成C传递依赖于A</p><p>16.三种范式<br>1、第一范式（1NF）：一个关系模式R的所有属性都是不可分的基本数据项。<br>2、第二范式（2NF）：满足第一范式，然后消除部分依赖。<br>3、第三范式（3NF）： 满足第二范式，消除传递依赖。</p><p>17.触发器的定义：某个条件成立的时候，触发器里定义的语句就会被自动的执行。触发器不需要人为的去调用，也不能调用。<br>(1).语句级触发器：可以在某些语句执行前或执行后被触发<br>(2).行级触发器：在定义了触发的表中的行数据改变时就会被触发一次</p><p>18.E-R图<br>1.三要素：实体（矩形）、属性（椭圆形）、关系（菱形）<br>2.作为主键的属性在文字下面加下划线<br>3.多值属性 双线椭圆表示；派生属性 虚线椭圆表示；可选属性 椭圆的文字后用(o)表示</p><p>19.三类加密算法<br>三类：<br>(1).对称加密：加密和解密使用相同密钥的加密算法。DES、3DES、DESX、Blowfish、IDEA、RC4、RC5、RC6和AES</p><p>(2).非对称加密：加密和解密使用不同密钥的加密算法，也叫公私钥加密。RSA、ECC（移动设备用）、Diffie-Hellman、El Gamal、DSA（数字签名用）</p><p>(3).Hash算法：Hash算法常用在不可还原的密码存储、信息完整性校验等。MD2、MD4、MD5、HAVAL、SHA、SHA-1、HMAC、HMAC-MD5、HMAC-SHA1</p><p>非对称加密算法运行速度慢，可以实现签名；<br>对称加密算法，建议在需要加密大量数据的时候使用，提高加解密速度；</p><p>在实际的操作过程中，通常采用的方式是：采用非对称加密算法管理对称算法的密钥，然后用对称加密算法加密数据，这样我们就集成了两类加密算法的优点，既实现了加密速度快的优点，又实现了安全方便管理密钥的优点。</p><p>20.PV操作与信号量的处理有关，P表示通过，V表示释放。用一个信号量与一个消息联系起来，当信号量的值为0时，表示期望的消息尚未产生；当信号量的值非0时，表示期望的消息已经存在。用PV操作实现进程同步时，调用P操作测试消息是否到达，调用V操作发送消息。</p><p>21.2PL 两段锁协议<br>定义：所有的读写操作之前均需要加锁，解锁操作后不允许出现加锁操作。<br>S锁：加S锁后其他事务可读不可写，直至加锁事务结束；<br>X锁：加X锁后其他事务均不可读或者写，直至事务结束；<br>事务执行分两个阶段：1是获得封锁阶段，2是释放封锁阶段，2PL可能会产生死锁；<br>2PL可以防止丢失修改、读脏数据等；是事务可串行化的必要条件，但不是充分条件；</p><p>22.可串行性：当一组事务交叉执行的结果和串行执行的结果一致时，这组事务具有可串行性</p><p>23.一级锁：所有写操作前加X锁，事务结束释放，可以防止丢失修改<br>二级锁：所有写操作前加X锁，事务结束释放；读操作前加S锁，操作结束释放，可以防止丢失修改和读脏数据<br>三级锁：所有写操作前加X锁，事务结束释放；读操作前加S锁，事务结束释放，可以防止丢失修改和读脏数据、不可重复读。</p><font color="#896821"> PS：这次的软考，还考到了事务的隔离级别，之前没有整理到。。如果分数线还和往年一样的话，我这次软考就过了～～提前默默开心一下～～</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库系统工程师-软考知识点整理&quot;&gt;&lt;a href=&quot;#数据库系统工程师-软考知识点整理&quot; class=&quot;headerlink&quot; title=&quot; 数据库系统工程师-软考知识点整理 &quot;&gt;&lt;/a&gt;&lt;font color=&quot;#8968CD&quot; size=&quot;5&quot;&gt; 数据库系
      
    
    </summary>
    
    
      <category term="数据库软考" scheme="http://www.cphoenix.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>2019.05.23 ☀️</title>
    <link href="http://www.cphoenix.cn/2019/05/23/20190523/"/>
    <id>http://www.cphoenix.cn/2019/05/23/20190523/</id>
    <published>2019-05-23T01:52:39.000Z</published>
    <updated>2019-05-29T01:18:30.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="离考试还有两天，学习进度达到20-记录，😢"><a href="#离考试还有两天，学习进度达到20-记录，😢" class="headerlink" title="离考试还有两天，学习进度达到20%记录，😢"></a>离考试还有两天，学习进度达到20%记录，😢</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;离考试还有两天，学习进度达到20-记录，😢&quot;&gt;&lt;a href=&quot;#离考试还有两天，学习进度达到20-记录，😢&quot; class=&quot;headerlink&quot; title=&quot;离考试还有两天，学习进度达到20%记录，😢&quot;&gt;&lt;/a&gt;离考试还有两天，学习进度达到20%记录，
      
    
    </summary>
    
    
      <category term="零零碎碎" scheme="http://www.cphoenix.cn/tags/%E9%9B%B6%E9%9B%B6%E7%A2%8E%E7%A2%8E/"/>
    
  </entry>
  
  <entry>
    <title>2019.05.16 ☀️</title>
    <link href="http://www.cphoenix.cn/2019/05/16/20190516/"/>
    <id>http://www.cphoenix.cn/2019/05/16/20190516/</id>
    <published>2019-05-16T08:34:16.000Z</published>
    <updated>2019-05-29T01:17:45.906Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一些以前写的想法"><a href="#一些以前写的想法" class="headerlink" title="一些以前写的想法"></a>一些以前写的想法</h4><p>2018.10.25<br>梦会反映现实中捕捉不到的潜意识，负面的、希望的，然而使我略微欣慰的,是我在现实中隐隐意识到了，或许我在主动面对这样自己了。  </p><p>2018.11.06<br>突然就会很想感谢生命中的贵人，感谢他们在我人生中每一个微不足道的节骨眼助了力。  </p><p>2018.11.12<br>生日周的第一天变得很亢奋，一下不能理解原来的负面情绪都是从哪来的了。</p><p>2019.2.15<br>今天开始准备数据库系统工程师的考试，希望能坚持下去，要把大学的专业课重新看一遍，脑壳痛。脑子饱了，肚子瘪了。           </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一些以前写的想法&quot;&gt;&lt;a href=&quot;#一些以前写的想法&quot; class=&quot;headerlink&quot; title=&quot;一些以前写的想法&quot;&gt;&lt;/a&gt;一些以前写的想法&lt;/h4&gt;&lt;p&gt;2018.10.25&lt;br&gt;梦会反映现实中捕捉不到的潜意识，负面的、希望的，然而使我略微欣慰
      
    
    </summary>
    
    
      <category term="零零碎碎" scheme="http://www.cphoenix.cn/tags/%E9%9B%B6%E9%9B%B6%E7%A2%8E%E7%A2%8E/"/>
    
  </entry>
  
</feed>
